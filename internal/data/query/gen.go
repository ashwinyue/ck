// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	DwdOrder *dwdOrder
	DwsOrder *dwsOrder
	OdsOrder *odsOrder
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DwdOrder = &Q.DwdOrder
	DwsOrder = &Q.DwsOrder
	OdsOrder = &Q.OdsOrder
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		DwdOrder: newDwdOrder(db, opts...),
		DwsOrder: newDwsOrder(db, opts...),
		OdsOrder: newOdsOrder(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DwdOrder dwdOrder
	DwsOrder dwsOrder
	OdsOrder odsOrder
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		DwdOrder: q.DwdOrder.clone(db),
		DwsOrder: q.DwsOrder.clone(db),
		OdsOrder: q.OdsOrder.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		DwdOrder: q.DwdOrder.replaceDB(db),
		DwsOrder: q.DwsOrder.replaceDB(db),
		OdsOrder: q.OdsOrder.replaceDB(db),
	}
}

type queryCtx struct {
	DwdOrder IDwdOrderDo
	DwsOrder IDwsOrderDo
	OdsOrder IOdsOrderDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DwdOrder: q.DwdOrder.WithContext(ctx),
		DwsOrder: q.DwsOrder.WithContext(ctx),
		OdsOrder: q.OdsOrder.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
