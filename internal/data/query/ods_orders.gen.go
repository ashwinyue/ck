// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ck/internal/data/model"
)

func newOdsOrder(db *gorm.DB, opts ...gen.DOOption) odsOrder {
	_odsOrder := odsOrder{}

	_odsOrder.odsOrderDo.UseDB(db, opts...)
	_odsOrder.odsOrderDo.UseModel(&model.OdsOrder{})

	tableName := _odsOrder.odsOrderDo.TableName()
	_odsOrder.ALL = field.NewAsterisk(tableName)
	_odsOrder.ID = field.NewInt64(tableName, "id")
	_odsOrder.OrderID = field.NewInt64(tableName, "order_id")
	_odsOrder.Detail = field.NewString(tableName, "detail")
	_odsOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_odsOrder.UpdatedAt = field.NewTime(tableName, "updated_at")

	_odsOrder.fillFieldMap()

	return _odsOrder
}

// odsOrder ODSå±‚è®¢å•è¡¨
type odsOrder struct {
	odsOrderDo

	ALL       field.Asterisk
	ID        field.Int64  // è‡ªå¢žID
	OrderID   field.Int64  // è®¢å•ID
	Detail    field.String // è®¢å•è¯¦æƒ…JSON
	CreatedAt field.Time   // åˆ›å»ºæ—¶é—´
	UpdatedAt field.Time   // æ›´æ–°æ—¶é—´

	fieldMap map[string]field.Expr
}

func (o odsOrder) Table(newTableName string) *odsOrder {
	o.odsOrderDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o odsOrder) As(alias string) *odsOrder {
	o.odsOrderDo.DO = *(o.odsOrderDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *odsOrder) updateTableName(table string) *odsOrder {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.Detail = field.NewString(table, "detail")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *odsOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *odsOrder) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["detail"] = o.Detail
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o odsOrder) clone(db *gorm.DB) odsOrder {
	o.odsOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o odsOrder) replaceDB(db *gorm.DB) odsOrder {
	o.odsOrderDo.ReplaceDB(db)
	return o
}

type odsOrderDo struct{ gen.DO }

type IOdsOrderDo interface {
	gen.SubQuery
	Debug() IOdsOrderDo
	WithContext(ctx context.Context) IOdsOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOdsOrderDo
	WriteDB() IOdsOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOdsOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOdsOrderDo
	Not(conds ...gen.Condition) IOdsOrderDo
	Or(conds ...gen.Condition) IOdsOrderDo
	Select(conds ...field.Expr) IOdsOrderDo
	Where(conds ...gen.Condition) IOdsOrderDo
	Order(conds ...field.Expr) IOdsOrderDo
	Distinct(cols ...field.Expr) IOdsOrderDo
	Omit(cols ...field.Expr) IOdsOrderDo
	Join(table schema.Tabler, on ...field.Expr) IOdsOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOdsOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOdsOrderDo
	Group(cols ...field.Expr) IOdsOrderDo
	Having(conds ...gen.Condition) IOdsOrderDo
	Limit(limit int) IOdsOrderDo
	Offset(offset int) IOdsOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOdsOrderDo
	Unscoped() IOdsOrderDo
	Create(values ...*model.OdsOrder) error
	CreateInBatches(values []*model.OdsOrder, batchSize int) error
	Save(values ...*model.OdsOrder) error
	First() (*model.OdsOrder, error)
	Take() (*model.OdsOrder, error)
	Last() (*model.OdsOrder, error)
	Find() ([]*model.OdsOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OdsOrder, err error)
	FindInBatches(result *[]*model.OdsOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OdsOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOdsOrderDo
	Assign(attrs ...field.AssignExpr) IOdsOrderDo
	Joins(fields ...field.RelationField) IOdsOrderDo
	Preload(fields ...field.RelationField) IOdsOrderDo
	FirstOrInit() (*model.OdsOrder, error)
	FirstOrCreate() (*model.OdsOrder, error)
	FindByPage(offset int, limit int) (result []*model.OdsOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOdsOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o odsOrderDo) Debug() IOdsOrderDo {
	return o.withDO(o.DO.Debug())
}

func (o odsOrderDo) WithContext(ctx context.Context) IOdsOrderDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o odsOrderDo) ReadDB() IOdsOrderDo {
	return o.Clauses(dbresolver.Read)
}

func (o odsOrderDo) WriteDB() IOdsOrderDo {
	return o.Clauses(dbresolver.Write)
}

func (o odsOrderDo) Session(config *gorm.Session) IOdsOrderDo {
	return o.withDO(o.DO.Session(config))
}

func (o odsOrderDo) Clauses(conds ...clause.Expression) IOdsOrderDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o odsOrderDo) Returning(value interface{}, columns ...string) IOdsOrderDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o odsOrderDo) Not(conds ...gen.Condition) IOdsOrderDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o odsOrderDo) Or(conds ...gen.Condition) IOdsOrderDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o odsOrderDo) Select(conds ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o odsOrderDo) Where(conds ...gen.Condition) IOdsOrderDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o odsOrderDo) Order(conds ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o odsOrderDo) Distinct(cols ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o odsOrderDo) Omit(cols ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o odsOrderDo) Join(table schema.Tabler, on ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o odsOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o odsOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o odsOrderDo) Group(cols ...field.Expr) IOdsOrderDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o odsOrderDo) Having(conds ...gen.Condition) IOdsOrderDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o odsOrderDo) Limit(limit int) IOdsOrderDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o odsOrderDo) Offset(offset int) IOdsOrderDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o odsOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOdsOrderDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o odsOrderDo) Unscoped() IOdsOrderDo {
	return o.withDO(o.DO.Unscoped())
}

func (o odsOrderDo) Create(values ...*model.OdsOrder) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o odsOrderDo) CreateInBatches(values []*model.OdsOrder, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o odsOrderDo) Save(values ...*model.OdsOrder) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o odsOrderDo) First() (*model.OdsOrder, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsOrder), nil
	}
}

func (o odsOrderDo) Take() (*model.OdsOrder, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsOrder), nil
	}
}

func (o odsOrderDo) Last() (*model.OdsOrder, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsOrder), nil
	}
}

func (o odsOrderDo) Find() ([]*model.OdsOrder, error) {
	result, err := o.DO.Find()
	return result.([]*model.OdsOrder), err
}

func (o odsOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OdsOrder, err error) {
	buf := make([]*model.OdsOrder, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o odsOrderDo) FindInBatches(result *[]*model.OdsOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o odsOrderDo) Attrs(attrs ...field.AssignExpr) IOdsOrderDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o odsOrderDo) Assign(attrs ...field.AssignExpr) IOdsOrderDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o odsOrderDo) Joins(fields ...field.RelationField) IOdsOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o odsOrderDo) Preload(fields ...field.RelationField) IOdsOrderDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o odsOrderDo) FirstOrInit() (*model.OdsOrder, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsOrder), nil
	}
}

func (o odsOrderDo) FirstOrCreate() (*model.OdsOrder, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OdsOrder), nil
	}
}

func (o odsOrderDo) FindByPage(offset int, limit int) (result []*model.OdsOrder, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o odsOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o odsOrderDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o odsOrderDo) Delete(models ...*model.OdsOrder) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *odsOrderDo) withDO(do gen.Dao) *odsOrderDo {
	o.DO = *do.(*gen.DO)
	return o
}
