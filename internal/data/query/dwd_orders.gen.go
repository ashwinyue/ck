// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ck/internal/data/model"
)

func newDwdOrder(db *gorm.DB, opts ...gen.DOOption) dwdOrder {
	_dwdOrder := dwdOrder{}

	_dwdOrder.dwdOrderDo.UseDB(db, opts...)
	_dwdOrder.dwdOrderDo.UseModel(&model.DwdOrder{})

	tableName := _dwdOrder.dwdOrderDo.TableName()
	_dwdOrder.ALL = field.NewAsterisk(tableName)
	_dwdOrder.ID = field.NewInt64(tableName, "id")
	_dwdOrder.OrderID = field.NewString(tableName, "order_id")
	_dwdOrder.Detail = field.NewString(tableName, "detail")
	_dwdOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_dwdOrder.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dwdOrder.fillFieldMap()

	return _dwdOrder
}

// dwdOrder DWDå±‚è®¢å•è¡¨-å·²å®Œæˆè®¢å•
type dwdOrder struct {
	dwdOrderDo

	ALL       field.Asterisk
	ID        field.Int64
	OrderID   field.String // è®¢å•ID
	Detail    field.String // è®¢å•è¯¦æƒ…JSON
	CreatedAt field.Time   // åˆ›å»ºæ—¶é—´
	UpdatedAt field.Time   // æ›´æ–°æ—¶é—´

	fieldMap map[string]field.Expr
}

func (d dwdOrder) Table(newTableName string) *dwdOrder {
	d.dwdOrderDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dwdOrder) As(alias string) *dwdOrder {
	d.dwdOrderDo.DO = *(d.dwdOrderDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dwdOrder) updateTableName(table string) *dwdOrder {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.OrderID = field.NewString(table, "order_id")
	d.Detail = field.NewString(table, "detail")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dwdOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dwdOrder) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["order_id"] = d.OrderID
	d.fieldMap["detail"] = d.Detail
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dwdOrder) clone(db *gorm.DB) dwdOrder {
	d.dwdOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dwdOrder) replaceDB(db *gorm.DB) dwdOrder {
	d.dwdOrderDo.ReplaceDB(db)
	return d
}

type dwdOrderDo struct{ gen.DO }

type IDwdOrderDo interface {
	gen.SubQuery
	Debug() IDwdOrderDo
	WithContext(ctx context.Context) IDwdOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDwdOrderDo
	WriteDB() IDwdOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDwdOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDwdOrderDo
	Not(conds ...gen.Condition) IDwdOrderDo
	Or(conds ...gen.Condition) IDwdOrderDo
	Select(conds ...field.Expr) IDwdOrderDo
	Where(conds ...gen.Condition) IDwdOrderDo
	Order(conds ...field.Expr) IDwdOrderDo
	Distinct(cols ...field.Expr) IDwdOrderDo
	Omit(cols ...field.Expr) IDwdOrderDo
	Join(table schema.Tabler, on ...field.Expr) IDwdOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDwdOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDwdOrderDo
	Group(cols ...field.Expr) IDwdOrderDo
	Having(conds ...gen.Condition) IDwdOrderDo
	Limit(limit int) IDwdOrderDo
	Offset(offset int) IDwdOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDwdOrderDo
	Unscoped() IDwdOrderDo
	Create(values ...*model.DwdOrder) error
	CreateInBatches(values []*model.DwdOrder, batchSize int) error
	Save(values ...*model.DwdOrder) error
	First() (*model.DwdOrder, error)
	Take() (*model.DwdOrder, error)
	Last() (*model.DwdOrder, error)
	Find() ([]*model.DwdOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DwdOrder, err error)
	FindInBatches(result *[]*model.DwdOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DwdOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDwdOrderDo
	Assign(attrs ...field.AssignExpr) IDwdOrderDo
	Joins(fields ...field.RelationField) IDwdOrderDo
	Preload(fields ...field.RelationField) IDwdOrderDo
	FirstOrInit() (*model.DwdOrder, error)
	FirstOrCreate() (*model.DwdOrder, error)
	FindByPage(offset int, limit int) (result []*model.DwdOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDwdOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dwdOrderDo) Debug() IDwdOrderDo {
	return d.withDO(d.DO.Debug())
}

func (d dwdOrderDo) WithContext(ctx context.Context) IDwdOrderDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dwdOrderDo) ReadDB() IDwdOrderDo {
	return d.Clauses(dbresolver.Read)
}

func (d dwdOrderDo) WriteDB() IDwdOrderDo {
	return d.Clauses(dbresolver.Write)
}

func (d dwdOrderDo) Session(config *gorm.Session) IDwdOrderDo {
	return d.withDO(d.DO.Session(config))
}

func (d dwdOrderDo) Clauses(conds ...clause.Expression) IDwdOrderDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dwdOrderDo) Returning(value interface{}, columns ...string) IDwdOrderDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dwdOrderDo) Not(conds ...gen.Condition) IDwdOrderDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dwdOrderDo) Or(conds ...gen.Condition) IDwdOrderDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dwdOrderDo) Select(conds ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dwdOrderDo) Where(conds ...gen.Condition) IDwdOrderDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dwdOrderDo) Order(conds ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dwdOrderDo) Distinct(cols ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dwdOrderDo) Omit(cols ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dwdOrderDo) Join(table schema.Tabler, on ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dwdOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dwdOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dwdOrderDo) Group(cols ...field.Expr) IDwdOrderDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dwdOrderDo) Having(conds ...gen.Condition) IDwdOrderDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dwdOrderDo) Limit(limit int) IDwdOrderDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dwdOrderDo) Offset(offset int) IDwdOrderDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dwdOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDwdOrderDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dwdOrderDo) Unscoped() IDwdOrderDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dwdOrderDo) Create(values ...*model.DwdOrder) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dwdOrderDo) CreateInBatches(values []*model.DwdOrder, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dwdOrderDo) Save(values ...*model.DwdOrder) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dwdOrderDo) First() (*model.DwdOrder, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DwdOrder), nil
	}
}

func (d dwdOrderDo) Take() (*model.DwdOrder, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DwdOrder), nil
	}
}

func (d dwdOrderDo) Last() (*model.DwdOrder, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DwdOrder), nil
	}
}

func (d dwdOrderDo) Find() ([]*model.DwdOrder, error) {
	result, err := d.DO.Find()
	return result.([]*model.DwdOrder), err
}

func (d dwdOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DwdOrder, err error) {
	buf := make([]*model.DwdOrder, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dwdOrderDo) FindInBatches(result *[]*model.DwdOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dwdOrderDo) Attrs(attrs ...field.AssignExpr) IDwdOrderDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dwdOrderDo) Assign(attrs ...field.AssignExpr) IDwdOrderDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dwdOrderDo) Joins(fields ...field.RelationField) IDwdOrderDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dwdOrderDo) Preload(fields ...field.RelationField) IDwdOrderDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dwdOrderDo) FirstOrInit() (*model.DwdOrder, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DwdOrder), nil
	}
}

func (d dwdOrderDo) FirstOrCreate() (*model.DwdOrder, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DwdOrder), nil
	}
}

func (d dwdOrderDo) FindByPage(offset int, limit int) (result []*model.DwdOrder, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dwdOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dwdOrderDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dwdOrderDo) Delete(models ...*model.DwdOrder) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dwdOrderDo) withDO(do gen.Dao) *dwdOrderDo {
	d.DO = *do.(*gen.DO)
	return d
}
