// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: etl/v1/etl.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationETLServiceCreateTask = "/api.etl.v1.ETLService/CreateTask"
const OperationETLServiceExecuteTask = "/api.etl.v1.ETLService/ExecuteTask"
const OperationETLServiceGetTask = "/api.etl.v1.ETLService/GetTask"
const OperationETLServiceGetTaskStatus = "/api.etl.v1.ETLService/GetTaskStatus"
const OperationETLServiceListTasks = "/api.etl.v1.ETLService/ListTasks"
const OperationETLServiceStopTask = "/api.etl.v1.ETLService/StopTask"
const OperationETLServiceUpdateTask = "/api.etl.v1.ETLService/UpdateTask"

type ETLServiceHTTPServer interface {
	// CreateTask 创建ETL任务
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error)
	// ExecuteTask 执行ETL任务
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskReply, error)
	// GetTask 获取ETL任务详情
	GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error)
	// GetTaskStatus 获取任务状态
	GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusReply, error)
	// ListTasks 列出ETL任务
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksReply, error)
	// StopTask 停止ETL任务
	StopTask(context.Context, *StopTaskRequest) (*StopTaskReply, error)
	// UpdateTask 更新ETL任务
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskReply, error)
}

func RegisterETLServiceHTTPServer(s *http.Server, srv ETLServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/etl/tasks", _ETLService_CreateTask0_HTTP_Handler(srv))
	r.GET("/api/v1/etl/tasks", _ETLService_ListTasks0_HTTP_Handler(srv))
	r.GET("/api/v1/etl/tasks/{task_id}", _ETLService_GetTask0_HTTP_Handler(srv))
	r.PUT("/api/v1/etl/tasks/{task_id}", _ETLService_UpdateTask0_HTTP_Handler(srv))
	r.POST("/api/v1/etl/tasks/{task_id}/execute", _ETLService_ExecuteTask0_HTTP_Handler(srv))
	r.POST("/api/v1/etl/tasks/{task_id}/stop", _ETLService_StopTask0_HTTP_Handler(srv))
	r.GET("/api/v1/etl/tasks/{task_id}/status", _ETLService_GetTaskStatus0_HTTP_Handler(srv))
}

func _ETLService_CreateTask0_HTTP_Handler(srv ETLServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationETLServiceCreateTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTask(ctx, req.(*CreateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTaskReply)
		return ctx.Result(200, reply)
	}
}

func _ETLService_ListTasks0_HTTP_Handler(srv ETLServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTasksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationETLServiceListTasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTasks(ctx, req.(*ListTasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTasksReply)
		return ctx.Result(200, reply)
	}
}

func _ETLService_GetTask0_HTTP_Handler(srv ETLServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationETLServiceGetTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTask(ctx, req.(*GetTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTaskReply)
		return ctx.Result(200, reply)
	}
}

func _ETLService_UpdateTask0_HTTP_Handler(srv ETLServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationETLServiceUpdateTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTask(ctx, req.(*UpdateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTaskReply)
		return ctx.Result(200, reply)
	}
}

func _ETLService_ExecuteTask0_HTTP_Handler(srv ETLServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExecuteTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationETLServiceExecuteTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExecuteTask(ctx, req.(*ExecuteTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExecuteTaskReply)
		return ctx.Result(200, reply)
	}
}

func _ETLService_StopTask0_HTTP_Handler(srv ETLServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationETLServiceStopTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopTask(ctx, req.(*StopTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopTaskReply)
		return ctx.Result(200, reply)
	}
}

func _ETLService_GetTaskStatus0_HTTP_Handler(srv ETLServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationETLServiceGetTaskStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTaskStatus(ctx, req.(*GetTaskStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTaskStatusReply)
		return ctx.Result(200, reply)
	}
}

type ETLServiceHTTPClient interface {
	CreateTask(ctx context.Context, req *CreateTaskRequest, opts ...http.CallOption) (rsp *CreateTaskReply, err error)
	ExecuteTask(ctx context.Context, req *ExecuteTaskRequest, opts ...http.CallOption) (rsp *ExecuteTaskReply, err error)
	GetTask(ctx context.Context, req *GetTaskRequest, opts ...http.CallOption) (rsp *GetTaskReply, err error)
	GetTaskStatus(ctx context.Context, req *GetTaskStatusRequest, opts ...http.CallOption) (rsp *GetTaskStatusReply, err error)
	ListTasks(ctx context.Context, req *ListTasksRequest, opts ...http.CallOption) (rsp *ListTasksReply, err error)
	StopTask(ctx context.Context, req *StopTaskRequest, opts ...http.CallOption) (rsp *StopTaskReply, err error)
	UpdateTask(ctx context.Context, req *UpdateTaskRequest, opts ...http.CallOption) (rsp *UpdateTaskReply, err error)
}

type ETLServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewETLServiceHTTPClient(client *http.Client) ETLServiceHTTPClient {
	return &ETLServiceHTTPClientImpl{client}
}

func (c *ETLServiceHTTPClientImpl) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...http.CallOption) (*CreateTaskReply, error) {
	var out CreateTaskReply
	pattern := "/api/v1/etl/tasks"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationETLServiceCreateTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ETLServiceHTTPClientImpl) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...http.CallOption) (*ExecuteTaskReply, error) {
	var out ExecuteTaskReply
	pattern := "/api/v1/etl/tasks/{task_id}/execute"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationETLServiceExecuteTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ETLServiceHTTPClientImpl) GetTask(ctx context.Context, in *GetTaskRequest, opts ...http.CallOption) (*GetTaskReply, error) {
	var out GetTaskReply
	pattern := "/api/v1/etl/tasks/{task_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationETLServiceGetTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ETLServiceHTTPClientImpl) GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...http.CallOption) (*GetTaskStatusReply, error) {
	var out GetTaskStatusReply
	pattern := "/api/v1/etl/tasks/{task_id}/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationETLServiceGetTaskStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ETLServiceHTTPClientImpl) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...http.CallOption) (*ListTasksReply, error) {
	var out ListTasksReply
	pattern := "/api/v1/etl/tasks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationETLServiceListTasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ETLServiceHTTPClientImpl) StopTask(ctx context.Context, in *StopTaskRequest, opts ...http.CallOption) (*StopTaskReply, error) {
	var out StopTaskReply
	pattern := "/api/v1/etl/tasks/{task_id}/stop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationETLServiceStopTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ETLServiceHTTPClientImpl) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...http.CallOption) (*UpdateTaskReply, error) {
	var out UpdateTaskReply
	pattern := "/api/v1/etl/tasks/{task_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationETLServiceUpdateTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
